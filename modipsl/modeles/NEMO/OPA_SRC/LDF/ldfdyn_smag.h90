   !!----------------------------------------------------------------------
   !!                        ***  ldfdyn_smag.h90  ***
   !!----------------------------------------------------------------------

   !!----------------------------------------------------------------------
   !!  OPA 9.0 , BIO (2005) 
   !!----------------------------------------------------------------------

   !!----------------------------------------------------------------------
   !!   'key_dynldf_smag'             2D lateral eddy viscosity coefficients
   !!----------------------------------------------------------------------

   SUBROUTINE ldf_dyn_smag( ld_print )
      !!----------------------------------------------------------------------
      !!                  ***  ROUTINE ldf_dyn_smag  ***
      !!                   
      !! ** Purpose :   initializations of the horizontal ocean physics
      !!
      !! ** Method  :   3D eddy viscosity coef. ( longitude, latitude, depth )
      !!       laplacian operator   : ahm1, ahm2 defined at T- and F-points
      !!                              ahm2, ahm4 never used
      !!       bilaplacian operator : ahm1, ahm2 never used
      !!                           :  ahm3, ahm4 defined at U- and V-points
      !!       ??? explanation of the default is missing
      !!       History: 
      !!              1.0 ! 07-05 Zeliang Wang ! Original Codes 
      !!----------------------------------------------------------------------
      !! * Modules used
      !! * Arguments
      LOGICAL, INTENT (in) :: ld_print   ! If true, output arrays on numout

      !! * local variables
      INTEGER  ::   ji, jj, jk      ! dummy loop indices
      REAL(wp) ::   &
         alfa, bgvalue,dh_max,dh_min  ! SMAG coeff. 
      REAL(wp) ::   &
         dudx,dvdy,dvdx,dudy   ! SMAG coeff. 
      REAL(wp) ::   &
         dvdx1,dvdx2,dudy1,dudy2  ! SMAG coeff. 
      REAL(wp), DIMENSION(jpk) ::   zcoef       ! temporary workspace
      REAL(wp), DIMENSION(jpi,jpj,jpk) :: tmph  ! temporary workspace
        alfa=0.1

   !   IF(lwp) WRITE(numout,*)
   !   IF(lwp) WRITE(numout,*) 'ldf_dyn_smag : SMAG lateral eddy viscosity coefficient'
   !   IF(lwp) WRITE(numout,*) '~~~~~~~~~~~'

      
      ! Set ahm1 and ahm2  ( T- and F- points) (used for laplacian operators
      ! =================                       whatever its orientation is)
         DO ji=2,jpi-1
            DO jj=2,jpj-1
               DO jk=1,jpk

           dudx = (ub(ji,jj,jk)-ub(ji-1,jj,jk)) / e1t(ji,jj)*tmask(ji,jj,jk)

           dvdy = (vb(ji,jj,jk)-vb(ji,jj-1,jk)) / e2t(ji,jj)*tmask(ji,jj,jk)

           dudy1 = 0.5*((ub(ji,jj+1,jk)-ub(ji,jj,jk)) /  e2f(ji,jj) *fmask(ji,jj,jk)& 
                 &    + (ub(ji,jj,jk)-ub(ji,jj-1,jk)) / e2f(ji,jj-1)*fmask(ji,jj-1,jk))

           dudy2 = 0.5*((ub(ji-1,jj+1,jk)-ub(ji-1,jj,jk)) / e2f(ji-1,jj)*fmask(ji-1,jj,jk) &
                 &    + (ub(ji-1,jj,jk)-ub(ji-1,jj-1,jk)) / e2f(ji-1,jj-1)*fmask(ji-1,jj-1,jk))

           dvdx1 = 0.5*((vb(ji+1,jj,jk)-vb(ji,jj,jk)) / e1f(ji,jj)*fmask(ji,jj,jk) &
                 &    + (vb(ji,jj,jk)-vb(ji-1,jj,jk)) / e1f(ji-1,jj)*fmask(ji-1,jj,jk))

           dvdx2 = 0.5*((vb(ji+1,jj-1,jk)-vb(ji,jj-1,jk)) / e1f(ji,jj-1)*fmask(ji,jj-1,jk) &
                 &    + (vb(ji,jj-1,jk)-vb(ji-1,jj-1,jk)) / e1f(ji-1,jj-1)*fmask(ji-1,jj-1,jk))

           dudy=0.5*(dudy1+dudy2)
           dvdx=0.5*(dvdx1+dvdx2)
            
  
           tmph(ji,jj,jk)=alfa*e1t(ji,jj)*e2t(ji,jj)*SQRT(dudx**2+dvdy**2+0.5*(dvdx+dudy)**2)  

              END DO
            END DO
         END DO

          CALL lbc_lnk(tmph,'T',1.)

      IF( ln_dynldf_lap ) THEN
         ! define ahm1 and ahm2 at the right grid point position
         ! (USER: modify ahm1 and ahm2 following your desiderata)


         IF(lwp) WRITE(numout,*) '              laplacian operator: ahm calculated by SMAG'
         IF(lwp) WRITE(numout,*) '              alfa can be changed!                      '    
         IF(lwp) WRITE(numout,*) '              test case!                                ' 



         IF( ln_dynldf_iso ) THEN
            IF(lwp) WRITE(numout,*) '              Caution, as implemented now, the isopycnal part of momentum'
            IF(lwp) WRITE(numout,*) '                 mixing use aht0 as eddy viscosity coefficient. Thus, it is'
            IF(lwp) WRITE(numout,*) '                 uniform and you must be sure that your ahm is greater than'
            IF(lwp) WRITE(numout,*) '                 aht0 everywhere in the model domain.'
         ENDIF

         ahm1=ahm0+tmph
         CALL lbc_lnk(ahm1,'T',1.)
         DO ji=1,jpi-1
            DO jj=1,jpj-1
               
               DO jk=1,jpk
                  ahm2(ji,jj,jk)=(ahm1(ji,jj,jk)*tmask(ji,jj,jk)+ahm1(ji+1,jj,jk)*tmask(ji+1,jj,jk)+      &
                       &             ahm1(ji+1,jj+1,jk)*tmask(ji+1,jj+1,jk)+ahm1(ji,jj+1,jk)*tmask(ji,jj+1,jk))/   &
                       &             max(tmask(ji,jj,jk)+tmask(ji+1,jj,jk)+tmask(ji+1,jj+1,jk)+tmask(ji,jj+1,jk),1.0)
               END DO
               
            END DO
         END DO

         CALL lbc_lnk(ahm2,'F',1.)
         
         
         dh_max=MAXVAL(ahm1(:,:,:))
         IF(lk_mpp) CALL mpp_max(dh_max)
         dh_min=MINVAL(ahm1(:,:,:))
         IF(lk_mpp) CALL mpp_min(dh_min)
         
         IF(lwp) WRITE(numout,*) '              laplacian operator: ahm calculated by SMAG'
         IF(lwp) WRITE(numout,*) ' MAX_DH',dh_max,'MIN_DH',dh_min
         
         
         
      ENDIF
      
      

      ! ahm3 and ahm4 at U- and V-points (used for bilaplacian operator
      ! ================================  whatever its orientation is)
      ! (USER: modify ahm3 and ahm4 following your desiderata)
      ! Here: ahm is proportional to the cube of the maximum of the gridspacing
      !       in the to horizontal direction
      !  Warning SHOUlD BE PUT AT U,V POINT!!!!!!!!
      IF( ln_dynldf_bilap ) THEN


!        IF(lwp) WRITE(numout,*) '              SAMG , but is going to be soon!! '
   !      IF(lwp) WRITE(numout,*) '              bi-laplacian operator: ahm proportional to e1**3 '
   !      IF(lwp) WRITE(numout,*) '              Caution, here we assume your mesh is isotropic ...'

        DO ji=1,jpi-1
           DO jj=1,jpj-1
              DO jk=1,jpk 
         ahm3(ji,jj,jk) =ahm0-(tmph(ji,jj,jk)*tmask(ji,jj,jk)+tmph(ji+1,jj,jk)*tmask(ji+1,jj,jk))* &
           &             min(e1u(ji,jj),e2u(ji,jj))**2/8. &
           &             /max(tmask(ji,jj,jk)+tmask(ji+1,jj,jk),1.0) 
         ahm4(ji,jj,jk) =ahm0-(tmph(ji,jj,jk)*tmask(ji,jj,jk)+tmph(ji,jj+1,jk)*tmask(ji,jj+1,jk))* &
           &             min(e1v(ji,jj),e2v(ji,jj))**2/8. &
           &             /max(tmask(ji,jj,jk)+tmask(ji,jj+1,jk),1.0) 
              END DO
           END DO
        END DO 
   !    dh_max=MAXVAL(ABS(ahm3(:,:,:)))
   !    IF(lk_mpp) CALL mpp_max(dh_max)
   !    IF(lwp) WRITE(numout,*) 'Maximum Biharmonic Coef. is ', dh_max 



          CALL lbc_lnk(ahm3,'U',1.)
          CALL lbc_lnk(ahm4,'V',1.)
      END IF

   END SUBROUTINE ldf_dyn_smag
